# -*- coding: utf-8 -*-
# Generated by Django 1.10.1 on 2016-10-01 02:08
from __future__ import unicode_literals

import django.contrib.postgres.fields
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Document',
            fields=[
                ('id', models.CharField(max_length=256, primary_key=True, serialize=False)),
                ('corpus_id', models.TextField(help_text='Namespace of the document collection.')),
                ('created', models.DateTimeField(default=django.utils.timezone.now, help_text='Keeps track of when this sentence was added')),
                ('date', models.DateField(help_text='Date of the document', null=True)),
                ('title', models.TextField(help_text='Title for the document')),
                ('gloss', models.TextField(help_text='The entire document')),
                ('metadata', models.TextField(help_text='Miscellaneous metadata in json')),
            ],
            options={
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Entity',
            fields=[
                ('id', models.TextField(help_text='The entity id is simply the canonical textual representation of the entity', primary_key=True, serialize=False)),
                ('created', models.DateTimeField(default=django.utils.timezone.now, help_text='Keeps track of when this sentence was added')),
                ('ner', models.CharField(help_text='Type of entity, usually an NER tag', max_length=64)),
            ],
            options={
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Link',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(default=django.utils.timezone.now, help_text='Keeps track of when this sentence was added')),
                ('score', models.FloatField(help_text='Linking score for the best entity match', null=True)),
                ('entity', models.ForeignKey(help_text='Entity participating in link', on_delete=django.db.models.deletion.CASCADE, to='corenlp.Entity')),
            ],
        ),
        migrations.CreateModel(
            name='Mention',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('created', models.DateTimeField(default=django.utils.timezone.now, help_text='Keeps track of when this sentence was added')),
                ('token_begin', models.IntegerField(help_text='Token offset within sentence where this entity mention starts')),
                ('token_end', models.IntegerField(help_text='Token offset within sentence where this entity mention ends')),
                ('doc_char_begin', models.IntegerField(help_text='Character offset within the document where this entity mention starts')),
                ('doc_char_end', models.IntegerField(help_text='Character offset within the document where this entity mention ends')),
                ('ner', models.CharField(help_text='Type of entity, usually an NER tag', max_length=64)),
                ('gloss', models.TextField(help_text='Raw text representation of the mention', null=True)),
                ('canonical_mention', models.ForeignKey(help_text='A link to the canonical mention id', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='mentions', to='corenlp.Mention')),
                ('doc', models.ForeignKey(help_text='Source document', on_delete=django.db.models.deletion.CASCADE, to='corenlp.Document')),
                ('parent_mention', models.ForeignKey(help_text='Identifies if this mention is contained in another one.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='children', to='corenlp.Mention')),
            ],
            options={
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Relation',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('created', models.DateTimeField(default=django.utils.timezone.now, help_text='Keeps track of when this sentence was added')),
                ('entity_name', models.TextField(help_text='The link of the entity')),
                ('entity_gloss', models.TextField(help_text='The textual gloss of the entity')),
                ('slot_value_name', models.TextField(help_text='The link of the slot value')),
                ('slot_value_gloss', models.TextField(help_text='The textual gloss of the slot filler')),
                ('relation', models.TextField(help_text='Relation between the entity and slot value')),
                ('score', models.FloatField(help_text='Score predicted by the relation extractor')),
                ('entity', models.ForeignKey(help_text='Link to the the entity mention', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='entity_relations', to='corenlp.Mention')),
            ],
            options={
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Sentence',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('created', models.DateTimeField(default=django.utils.timezone.now, help_text='Keeps track of when this sentence was added')),
                ('sentence_index', models.IntegerField(help_text='Index of sentence in document (useful to order sentences)')),
                ('words', django.contrib.postgres.fields.ArrayField(base_field=models.TextField(), help_text='Array of tokens', size=None)),
                ('lemmas', django.contrib.postgres.fields.ArrayField(base_field=models.TextField(), help_text='Array of lemmas', size=None)),
                ('pos_tags', django.contrib.postgres.fields.ArrayField(base_field=models.TextField(), help_text='Array of POS tags', size=None)),
                ('ner_tags', django.contrib.postgres.fields.ArrayField(base_field=models.TextField(), help_text='Array of NER tags', size=None)),
                ('doc_char_begin', django.contrib.postgres.fields.ArrayField(base_field=models.IntegerField(), help_text='Array of character begin positions for each token, relative to document start', size=None)),
                ('doc_char_end', django.contrib.postgres.fields.ArrayField(base_field=models.IntegerField(), help_text='Array of character end positions for each token, relative to document start', size=None)),
                ('dependencies', models.TextField(db_column='dependencies_extra', help_text='Dependency tree in CONLL format', null=True)),
                ('gloss', models.TextField(help_text='Raw text representation of the sentence')),
                ('doc', models.ForeignKey(help_text='Source document', on_delete=django.db.models.deletion.CASCADE, to='corenlp.Document')),
            ],
            options={
                'managed': True,
            },
        ),
        migrations.AddField(
            model_name='relation',
            name='sentence',
            field=models.ForeignKey(help_text='Sentence containing the mention', on_delete=django.db.models.deletion.CASCADE, to='corenlp.Sentence'),
        ),
        migrations.AddField(
            model_name='relation',
            name='slot_value',
            field=models.ForeignKey(help_text='Link to the the slot mention', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='slot_relations', to='corenlp.Mention'),
        ),
        migrations.AddField(
            model_name='mention',
            name='sentence',
            field=models.ForeignKey(help_text='Sentence containing the mention', on_delete=django.db.models.deletion.CASCADE, to='corenlp.Sentence'),
        ),
        migrations.AddField(
            model_name='link',
            name='mention',
            field=models.OneToOneField(help_text='Mention participating in link', on_delete=django.db.models.deletion.CASCADE, to='corenlp.Mention'),
        ),
    ]
